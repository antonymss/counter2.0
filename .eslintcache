[{"D:\\projects\\counter2.0\\src\\reportWebVitals.ts":"1","D:\\projects\\counter2.0\\src\\App.tsx":"2","D:\\projects\\counter2.0\\src\\components\\Buttons.tsx":"3","D:\\projects\\counter2.0\\src\\components\\Display.tsx":"4","D:\\projects\\counter2.0\\src\\index.tsx":"5"},{"size":425,"mtime":1607607796975,"results":"6","hashOfConfig":"7"},{"size":2288,"mtime":1612086495256,"results":"8","hashOfConfig":"7"},{"size":313,"mtime":1612086495241,"results":"9","hashOfConfig":"7"},{"size":261,"mtime":1612016382263,"results":"10","hashOfConfig":"7"},{"size":500,"mtime":1607607796975,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"travq1",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\projects\\counter2.0\\src\\reportWebVitals.ts",[],"D:\\projects\\counter2.0\\src\\App.tsx",["23"],"import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Buttons from './components/Buttons';\nimport {Display} from './components/Display';\n\n\nexport type AppStateType = {\n    minValue: number\n    maxValue: number\n    setMode: boolean\n    isSetDisabled: boolean\n}\n\nfunction App() {\n    const [appState, setAppState] = useState<AppStateType>({\n        minValue: 0,\n        maxValue: 5,\n        setMode: false,\n        isSetDisabled: false\n    })\n    const [counter, setCounter] = useState<number>(appState.minValue)\n    const [error, setError] = useState<string>('')\n\n    useEffect(() => {\n        const maxValue = parseInt((localStorage.getItem('maxValue') || '0'), 10)\n        const minValue = parseInt((localStorage.getItem('minValue') || '5'), 10)\n        setAppState({...appState, maxValue, minValue})\n    }, [])\n\n    const increment = () => {\n        if (counter === appState.maxValue) return false\n        setCounter(counter + 1)\n    }\n    const reset = () => {\n        setCounter(appState.minValue)\n    }\n    const set = () => {\n        if (appState.setMode) {\n            setAppState({...appState, setMode: false})\n            localStorage.setItem('maxValue', JSON.stringify(appState.maxValue))\n            localStorage.setItem('minValue', JSON.stringify(appState.minValue))\n        } else {\n            setCounter(appState.minValue)\n        }\n    }\n\n\n    return (\n        <div className=\"App\">\n        <div className=\"container\">\n        <div className=\"variant-2\">\n                <Display counter={counter}\n                setMode={appState.setMode}\n                appState={appState}\n                setAppState={setAppState}\n                error={error}\n                setError={setError}/>\n                <div className={'buttons'}>\n                    <Buttons name={'increment'} isDisabled={(counter === appState.maxValue) || appState.setMode}\n                             callBack={increment}/>\n                    <Buttons name={'reset'} isDisabled={(counter === appState.minValue) || appState.setMode}\n                             callBack={reset}/>\n                    <Buttons name={'set'} isDisabled={!!error && appState.isSetDisabled} callBack={set}/>\n                </div>\n            </div>\n        </div>\n</div>\n);\n}\n\nexport default App;\n","D:\\projects\\counter2.0\\src\\components\\Buttons.tsx",[],"D:\\projects\\counter2.0\\src\\components\\Display.tsx",[],"D:\\projects\\counter2.0\\src\\index.tsx",[],{"ruleId":"24","severity":1,"message":"25","line":28,"column":8,"nodeType":"26","endLine":28,"endColumn":10,"suggestions":"27"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'appState'. Either include it or remove the dependency array. You can also do a functional update 'setAppState(a => ...)' if you only need 'appState' in the 'setAppState' call.","ArrayExpression",["28"],{"desc":"29","fix":"30"},"Update the dependencies array to be: [appState]",{"range":"31","text":"32"},[832,834],"[appState]"]